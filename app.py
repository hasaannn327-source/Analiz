import streamlit as st
import ezdxf
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import tempfile
import os
import subprocess
import shutil
import io
from typing import Dict, List, Tuple
import math
import platform

# Sayfa konfig√ºrasyonu
st.set_page_config(
    page_title="DWG/DXF Yapƒ± Elemanƒ± Analizi",
    page_icon="üèóÔ∏è",
    layout="wide"
)

class StructuralElementAnalyzer:
    def __init__(self):
        self.elements = {
            'kolon': [],
            'kiri≈ü': [],
            'perde': [],
            'd√∂≈üeme': [],
            'temel': []
        }
        self.layer_keywords = {
            'kolon': ['kolon', 'column', 'col', 'pillar', 'c-'],
            'kiri≈ü': ['kiri≈ü', 'kiri≈ü', 'beam', 'b-', 'kirish'],
            'perde': ['perde', 'wall', 'shear', 'w-', 'duvar'],
            'd√∂≈üeme': ['d√∂≈üeme', 'slab', 'floor', 'f-', 'doseme'],
            'temel': ['temel', 'foundation', 'found', 'foot', 'fd-']
        }
    
    def convert_dwg_to_dxf(self, dwg_file):
        """DWG dosyasƒ±nƒ± LibreCAD kullanarak DXF'ye d√∂n√º≈üt√ºr"""
        return self.convert_dwg_to_dxf_librecad(dwg_file)
    
    def check_librecad_installed(self):
        """LibreCAD kurulu mu kontrol et"""
        try:
            # Farklƒ± i≈ületim sistemleri i√ßin LibreCAD komutlarƒ±
            system = platform.system().lower()
            
            if system == 'windows':
                # Windows'ta LibreCAD genellikle Program Files'da
                possible_paths = [
                    r"C:\Program Files\LibreCAD\librecad.exe",
                    r"C:\Program Files (x86)\LibreCAD\librecad.exe",
                    "librecad.exe"  # PATH'ta varsa
                ]
                
                for path in possible_paths:
                    if shutil.which(path):
                        return True, path
                        
                # PATH'ta arama
                if shutil.which("librecad"):
                    return True, "librecad"
                    
            else:
                # Linux/macOS i√ßin
                if shutil.which("librecad"):
                    result = subprocess.run(
                        ['librecad', '--version'],
                        capture_output=True,
                        text=True,
                        timeout=5
                    )
                    if result.returncode == 0:
                        return True, "librecad"
                        
            return False, None
            
        except Exception:
            return False, None
    
    def convert_dwg_to_dxf_librecad(self, dwg_file):
        """LibreCAD kullanarak DWG dosyasƒ±nƒ± DXF'ye d√∂n√º≈üt√ºr"""
        try:
            # LibreCAD kurulu mu kontrol et
            librecad_installed, librecad_path = self.check_librecad_installed()
            
            if not librecad_installed:
                return self.try_alternative_conversion(dwg_file)
            
            # Ge√ßici dosyalar olu≈ütur
            with tempfile.NamedTemporaryFile(delete=False, suffix='.dwg') as temp_dwg:
                temp_dwg.write(dwg_file.read())
                temp_dwg_path = temp_dwg.name
            
            temp_dxf_path = temp_dwg_path.replace('.dwg', '.dxf')
            
            st.info(f"LibreCAD ile d√∂n√º≈üt√ºrme ba≈ülƒ±yor: {librecad_path}")
            
            # Sistem tipine g√∂re komut hazƒ±rla
            system = platform.system().lower()
            
            if system == 'windows':
                # Windows i√ßin batch d√∂n√º≈üt√ºrme
                cmd = [
                    librecad_path,
                    '-batch',
                    temp_dwg_path
                ]
            else:
                # Linux/macOS i√ßin
                cmd = [
                    librecad_path,
                    '--batch',
                    '--input', temp_dwg_path,
                    '--output', temp_dxf_path
                ]
            
            # D√∂n√º≈üt√ºrme i≈ülemini √ßalƒ±≈ütƒ±r
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60,
                cwd=os.path.dirname(temp_dwg_path)
            )
            
            # Sonu√ß kontrol et
            if os.path.exists(temp_dxf_path) and os.path.getsize(temp_dxf_path) > 0:
                st.success("‚úÖ DWG dosyasƒ± ba≈üarƒ±yla DXF'ye d√∂n√º≈üt√ºr√ºld√º!")
                return temp_dxf_path
            else:
                st.warning("LibreCAD d√∂n√º≈üt√ºrme tamamlanamadƒ±.")
                if result.stderr:
                    st.code(f"LibreCAD √ßƒ±ktƒ±sƒ±: {result.stderr}")
                return self.create_demo_dxf()
                
        except subprocess.TimeoutExpired:
            st.error("‚è±Ô∏è D√∂n√º≈üt√ºrme i≈ülemi zaman a≈üƒ±mƒ±na uƒüradƒ± (60 saniye)")
            return self.create_demo_dxf()
        except Exception as e:
            st.warning(f"LibreCAD hatasƒ±: {str(e)}")
            return self.create_demo_dxf()
        finally:
            # Ge√ßici DWG dosyasƒ±nƒ± temizle
            try:
                if 'temp_dwg_path' in locals() and os.path.exists(temp_dwg_path):
                    os.unlink(temp_dwg_path)
            except:
                pass
    
    def try_alternative_conversion(self, dwg_file):
        """Alternatif d√∂n√º≈üt√ºrme y√∂ntemleri dene"""
        st.warning("üîß LibreCAD bulunamadƒ±. Alternatif y√∂ntemler deneniyor...")
        
        # FreeCAD'i dene (eƒüer varsa)
        if shutil.which("freecad"):
            st.info("FreeCAD ile d√∂n√º≈üt√ºrme deneniyor...")
            return self.convert_with_freecad(dwg_file)
        
        # QCAD'i dene (eƒüer varsa)  
        if shutil.which("qcad"):
            st.info("QCAD ile d√∂n√º≈üt√ºrme deneniyor...")
            return self.convert_with_qcad(dwg_file)
        
        # Hi√ßbiri yoksa demo dosya olu≈ütur
        st.info("üìù D√∂n√º≈üt√ºrme ara√ßlarƒ± bulunamadƒ±. Demo dosyasƒ± kullanƒ±lƒ±yor.")
        self.show_installation_instructions()
        return self.create_demo_dxf()
    
    def convert_with_freecad(self, dwg_file):
        """FreeCAD ile d√∂n√º≈üt√ºrme (alternatif)"""
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.dwg') as temp_dwg:
                temp_dwg.write(dwg_file.read())
                temp_dwg_path = temp_dwg.name
            
            temp_dxf_path = temp_dwg_path.replace('.dwg', '.dxf')
            
            # FreeCAD Python scripti
            script = f"""
import FreeCAD
import Import
doc = FreeCAD.newDocument()
Import.insert("{temp_dwg_path}", doc.Name)
Import.export(doc.Objects, "{temp_dxf_path}")
FreeCAD.closeDocument(doc.Name)
"""
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as script_file:
                script_file.write(script)
                script_path = script_file.name
            
            result = subprocess.run([
                'freecad', '--console', '--run-python', script_path
            ], capture_output=True, timeout=30)
            
            if os.path.exists(temp_dxf_path):
                st.success("‚úÖ FreeCAD ile d√∂n√º≈üt√ºrme ba≈üarƒ±lƒ±!")
                return temp_dxf_path
                
        except Exception as e:
            st.warning(f"FreeCAD d√∂n√º≈üt√ºrme hatasƒ±: {str(e)}")
            
        return self.create_demo_dxf()
    
    def convert_with_qcad(self, dwg_file):
        """QCAD ile d√∂n√º≈üt√ºrme (alternatif)"""
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.dwg') as temp_dwg:
                temp_dwg.write(dwg_file.read())
                temp_dwg_path = temp_dwg.name
            
            temp_dxf_path = temp_dwg_path.replace('.dwg', '.dxf')
            
            result = subprocess.run([
                'qcad', '-batch', '-input', temp_dwg_path, '-output', temp_dxf_path
            ], capture_output=True, timeout=30)
            
            if os.path.exists(temp_dxf_path):
                st.success("‚úÖ QCAD ile d√∂n√º≈üt√ºrme ba≈üarƒ±lƒ±!")
                return temp_dxf_path
                
        except Exception as e:
            st.warning(f"QCAD d√∂n√º≈üt√ºrme hatasƒ±: {str(e)}")
            
        return self.create_demo_dxf()
    
    def show_installation_instructions(self):
        """Kurulum talimatlarƒ±nƒ± g√∂ster"""
        st.info("üîß **CAD D√∂n√º≈üt√ºrme Ara√ßlarƒ± Kurulum Talimatlarƒ±:**")
        
        system = platform.system().lower()
        
        if system == 'windows':
            st.markdown("""
            **Windows i√ßin:**
            - LibreCAD: https://librecad.org/cms/home.html adresinden indirin
            - FreeCAD: https://www.freecad.org/downloads.php
            - QCAD: https://qcad.org/en/download
            """)
        elif system == 'darwin':  # macOS
            st.markdown("""
            **macOS i√ßin:**
            ```bash
            # Homebrew ile
            brew install librecad
            brew install freecad
            brew install qcad
            ```
            """)
        else:  # Linux
            st.markdown("""
            **Linux i√ßin:**
            ```bash
            # Ubuntu/Debian
            sudo apt-get update
            sudo apt-get install librecad freecad qcad
            
            # CentOS/RHEL
            sudo yum install librecad freecad qcad
            
            # Arch Linux
            sudo pacman -S librecad freecad qcad
            ```
            """)
        
        st.markdown("Kurulum sonrasƒ± uygulamayƒ± yeniden ba≈ülatƒ±n.")
    
    def create_demo_dxf(self):
        """Demo DXF dosyasƒ± olu≈ütur"""
        doc = ezdxf.new('R2010')
        msp = doc.modelspace()
        
        # Demo katmanlar olu≈ütur
        doc.layers.new(name='KOLON', dxfattribs={'color': 1})
        doc.layers.new(name='KIRI≈û', dxfattribs={'color': 2})
        doc.layers.new(name='PERDE', dxfattribs={'color': 3})
        doc.layers.new(name='D√ñ≈ûEME', dxfattribs={'color': 4})
        doc.layers.new(name='TEMEL', dxfattribs={'color': 5})
        
        # Demo elemanlar ekle
        # Kolonlar
        for i in range(5):
            x, y = i * 5, 0
            msp.add_lwpolyline(
                [(x, y), (x+0.5, y), (x+0.5, y+0.5), (x, y+0.5)],
                close=True,
                dxfattribs={'layer': 'KOLON'}
            )
        
        # Kiri≈üler
        for i in range(4):
            x1, x2 = i * 5 + 0.5, (i+1) * 5
            msp.add_line((x1, 0.25), (x2, 0.25), dxfattribs={'layer': 'KIRI≈û'})
        
        # Perde
        msp.add_lwpolyline(
            [(0, -2), (20, -2), (20, -1.8), (0, -1.8)],
            close=True,
            dxfattribs={'layer': 'PERDE'}
        )
        
        # D√∂≈üeme
        msp.add_lwpolyline(
            [(-1, -1), (21, -1), (21, 1), (-1, 1)],
            close=True,
            dxfattribs={'layer': 'D√ñ≈ûEME'}
        )
        
        # Temel
        for i in range(5):
            x, y = i * 5 - 0.2, -3
            msp.add_lwpolyline(
                [(x, y), (x+0.9, y), (x+0.9, y+0.8), (x, y+0.8)],
                close=True,
                dxfattribs={'layer': 'TEMEL'}
            )
        
        # Ge√ßici dosyaya kaydet
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.dxf')
        doc.saveas(temp_file.name)
        return temp_file.name
    
    def analyze_dxf(self, dxf_path):
        """DXF dosyasƒ±nƒ± analiz et"""
        try:
            doc = ezdxf.readfile(dxf_path)
            msp = doc.modelspace()
            
            # Elemanlarƒ± sƒ±fƒ±rla
            for key in self.elements:
                self.elements[key] = []
            
            # Her entity i√ßin analiz yap
            for entity in msp:
                layer_name = entity.dxf.layer.lower()
                element_type = self.classify_element(layer_name)
                
                if element_type:
                    element_data = self.extract_element_data(entity, element_type)
                    if element_data:
                        self.elements[element_type].append(element_data)
            
            return True
            
        except Exception as e:
            st.error(f"DXF analiz hatasƒ±: {str(e)}")
            return False
    
    def classify_element(self, layer_name):
        """Katman adƒ±na g√∂re eleman tipini belirle"""
        for element_type, keywords in self.layer_keywords.items():
            if any(keyword in layer_name for keyword in keywords):
                return element_type
        return None
    
    def extract_element_data(self, entity, element_type):
        """Entity'den eleman verilerini √ßƒ±kar"""
        try:
            if entity.dxftype() == 'LWPOLYLINE':
                return self.analyze_polyline(entity, element_type)
            elif entity.dxftype() == 'LINE':
                return self.analyze_line(entity, element_type)
            elif entity.dxftype() == 'CIRCLE':
                return self.analyze_circle(entity, element_type)
            elif entity.dxftype() == 'RECTANGLE':
                return self.analyze_rectangle(entity, element_type)
        except:
            pass
        return None
    
    def analyze_polyline(self, polyline, element_type):
        """Polyline analizi"""
        points = list(polyline.vertices())
        if len(points) < 3:
            return None
        
        # Alan hesapla
        area = self.calculate_polygon_area(points)
        
        # √áevre hesapla
        perimeter = self.calculate_perimeter(points)
        
        # Boyutlarƒ± hesapla
        min_x = min(p[0] for p in points)
        max_x = max(p[0] for p in points)
        min_y = min(p[1] for p in points)
        max_y = max(p[1] for p in points)
        
        width = max_x - min_x
        length = max_y - min_y
        
        return {
            'tip': element_type,
            'alan': abs(area),
            '√ßevre': perimeter,
            'geni≈ülik': width,
            'uzunluk': length,
            'koordinat': ((min_x + max_x) / 2, (min_y + max_y) / 2)
        }
    
    def analyze_line(self, line, element_type):
        """√áizgi analizi"""
        start = line.dxf.start
        end = line.dxf.end
        
        length = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)
        
        return {
            'tip': element_type,
            'uzunluk': length,
            'alan': 0,
            'geni≈ülik': 0,
            'koordinat': ((start[0] + end[0]) / 2, (start[1] + end[1]) / 2)
        }
    
    def analyze_circle(self, circle, element_type):
        """Daire analizi"""
        radius = circle.dxf.radius
        area = math.pi * radius ** 2
        perimeter = 2 * math.pi * radius
        
        return {
            'tip': element_type,
            'alan': area,
            '√ßevre': perimeter,
            '√ßap': radius * 2,
            'koordinat': (circle.dxf.center[0], circle.dxf.center[1])
        }
    
    def calculate_polygon_area(self, points):
        """Polygon alanƒ± hesapla (Shoelace formula)"""
        n = len(points)
        if n < 3:
            return 0
        
        area = 0
        for i in range(n):
            j = (i + 1) % n
            area += points[i][0] * points[j][1]
            area -= points[j][0] * points[i][1]
        
        return area / 2
    
    def calculate_perimeter(self, points):
        """√áevre hesapla"""
        if len(points) < 2:
            return 0
        
        perimeter = 0
        for i in range(len(points)):
            next_i = (i + 1) % len(points)
            dx = points[next_i][0] - points[i][0]
            dy = points[next_i][1] - points[i][1]
            perimeter += math.sqrt(dx**2 + dy**2)
        
        return perimeter
    
    def get_summary_statistics(self):
        """√ñzet istatistikler"""
        stats = {}
        
        for element_type, elements in self.elements.items():
            if elements:
                stats[element_type] = {
                    'adet': len(elements),
                    'toplam_alan': sum(e.get('alan', 0) for e in elements),
                    'ortalama_alan': np.mean([e.get('alan', 0) for e in elements]),
                    'toplam_uzunluk': sum(e.get('uzunluk', 0) for e in elements)
                }
            else:
                stats[element_type] = {
                    'adet': 0,
                    'toplam_alan': 0,
                    'ortalama_alan': 0,
                    'toplam_uzunluk': 0
                }
        
        return stats
    
    def perform_structural_checks(self, stats):
        """Statik kontroller"""
        warnings = []
        
        # Toplam d√∂≈üeme alanƒ±
        total_floor_area = stats.get('d√∂≈üeme', {}).get('toplam_alan', 0)
        total_wall_area = stats.get('perde', {}).get('toplam_alan', 0)
        
        # Perde alanƒ± oranƒ± kontrol√º (d√∂≈üeme alanƒ±nƒ±n %1'i minimum)
        if total_floor_area > 0:
            wall_ratio = (total_wall_area / total_floor_area) * 100
            if wall_ratio < 1.0:
                warnings.append(f"‚ö†Ô∏è Perde alanƒ± oranƒ± d√º≈ü√ºk: %{wall_ratio:.1f} (Minimum %1.0 √∂nerilir)")
        
        # Kolon sayƒ±sƒ± kontrol√º
        column_count = stats.get('kolon', {}).get('adet', 0)
        if total_floor_area > 0:
            area_per_column = total_floor_area / max(column_count, 1)
            if area_per_column > 25:  # 25 m¬≤'den fazla alan per kolon
                warnings.append(f"‚ö†Ô∏è Kolon yoƒüunluƒüu d√º≈ü√ºk: {area_per_column:.1f} m¬≤/kolon (Max 25 m¬≤/kolon √∂nerilir)")
        
        # Kiri≈ü a√ßƒ±klƒ±ƒüƒ± kontrol√º
        beam_elements = self.elements.get('kiri≈ü', [])
        long_beams = [b for b in beam_elements if b.get('uzunluk', 0) > 8]
        if long_beams:
            warnings.append(f"‚ö†Ô∏è {len(long_beams)} adet kiri≈ü 8m'den uzun (A√ßƒ±klƒ±k kontrol√º gerekli)")
        
        # Temel kontrol√º
        column_count = stats.get('kolon', {}).get('adet', 0)
        foundation_count = stats.get('temel', {}).get('adet', 0)
        if foundation_count < column_count:
            warnings.append(f"‚ö†Ô∏è Temel sayƒ±sƒ± yetersiz: {foundation_count} temel / {column_count} kolon")
        
        return warnings

# Streamlit UI
def main():
    st.title("üèóÔ∏è DWG/DXF Yapƒ± Elemanƒ± Analizi")
    st.markdown("---")
    
    # Sidebar
    st.sidebar.header("üìÅ Dosya Y√ºkleme")
    uploaded_file = st.sidebar.file_uploader(
        "DWG veya DXF dosyasƒ± se√ßin",
        type=['dwg', 'dxf'],
        help="DWG dosyalarƒ± otomatik olarak DXF'ye d√∂n√º≈üt√ºr√ºl√ºr"
    )
    
    if uploaded_file is not None:
        # Analyzer olu≈ütur
        analyzer = StructuralElementAnalyzer()
        
        with st.spinner('Dosya i≈üleniyor...'):
            # Dosya tipine g√∂re i≈üle
            if uploaded_file.name.lower().endswith('.dwg'):
                st.info("DWG dosyasƒ± DXF'ye d√∂n√º≈üt√ºr√ºl√ºyor...")
                dxf_path = analyzer.convert_dwg_to_dxf(uploaded_file)
            else:
                # DXF dosyasƒ±nƒ± ge√ßici olarak kaydet
                with tempfile.NamedTemporaryFile(delete=False, suffix='.dxf') as temp_file:
                    temp_file.write(uploaded_file.read())
                    dxf_path = temp_file.name
            
            if dxf_path and analyzer.analyze_dxf(dxf_path):
                # Ana i√ßerik
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.header("üìä Analiz Sonu√ßlarƒ±")
                    
                    # ƒ∞statistikler
                    stats = analyzer.get_summary_statistics()
                    
                    # √ñzet kartlar
                    metrics_cols = st.columns(5)
                    element_names = ['Kolon', 'Kiri≈ü', 'Perde', 'D√∂≈üeme', 'Temel']
                    element_keys = ['kolon', 'kiri≈ü', 'perde', 'd√∂≈üeme', 'temel']
                    
                    for i, (name, key) in enumerate(zip(element_names, element_keys)):
                        with metrics_cols[i]:
                            adet = stats[key]['adet']
                            alan = stats[key]['toplam_alan']
                            st.metric(
                                label=f"{name}",
                                value=f"{adet} adet",
                                delta=f"{alan:.1f} m¬≤"
                            )
                    
                    # Detay tablosu
                    st.subheader("üìã Detaylƒ± Veriler")
                    
                    # Tablo se√ßimi
                    selected_element = st.selectbox(
                        "G√∂r√ºnt√ºlenecek eleman tipi:",
                        options=element_keys,
                        format_func=lambda x: x.capitalize()
                    )
                    
                    if analyzer.elements[selected_element]:
                        df = pd.DataFrame(analyzer.elements[selected_element])
                        
                        # Koordinat s√ºtununu d√ºzenle
                        if 'koordinat' in df.columns:
                            df['X'] = df['koordinat'].apply(lambda x: f"{x[0]:.1f}")
                            df['Y'] = df['koordinat'].apply(lambda x: f"{x[1]:.1f}")
                            df = df.drop('koordinat', axis=1)
                        
                        # Sayƒ±sal s√ºtunlarƒ± d√ºzenle
                        numeric_columns = ['alan', 'uzunluk', 'geni≈ülik', '√ßevre', '√ßap']
                        for col in numeric_columns:
                            if col in df.columns:
                                df[col] = df[col].round(2)
                        
                        st.dataframe(df, use_container_width=True)
                    else:
                        st.info(f"Bu projede {selected_element} elemanƒ± bulunamadƒ±.")
                
                with col2:
                    st.header("‚ö†Ô∏è Statik Kontroller")
                    
                    # Uyarƒ±lar
                    warnings = analyzer.perform_structural_checks(stats)
                    
                    if warnings:
                        for warning in warnings:
                            st.warning(warning)
                    else:
                        st.success("‚úÖ T√ºm temel kontroller ba≈üarƒ±lƒ±!")
                    
                    # Alan daƒüƒ±lƒ±mƒ±
                    st.subheader("üìà Alan Daƒüƒ±lƒ±mƒ±")
                    
                    areas = [stats[key]['toplam_alan'] for key in element_keys if stats[key]['toplam_alan'] > 0]
                    labels = [key.capitalize() for key in element_keys if stats[key]['toplam_alan'] > 0]
                    
                    if areas:
                        fig_pie = px.pie(
                            values=areas,
                            names=labels,
                            title="Eleman Alan Daƒüƒ±lƒ±mƒ±"
                        )
                        fig_pie.update_layout(height=400)
                        st.plotly_chart(fig_pie, use_container_width=True)
                
                # Alt b√∂l√ºm - Grafikler
                st.header("üìä G√∂rselle≈ütirme")
                
                # Grafik se√ßenekleri
                chart_type = st.radio(
                    "Grafik tipi se√ßin:",
                    options=["Adet Kar≈üƒ±la≈ütƒ±rmasƒ±", "Alan Kar≈üƒ±la≈ütƒ±rmasƒ±", "Detay Analiz"],
                    horizontal=True
                )
                
                if chart_type == "Adet Kar≈üƒ±la≈ütƒ±rmasƒ±":
                    counts = [stats[key]['adet'] for key in element_keys]
                    fig_bar = px.bar(
                        x=[key.capitalize() for key in element_keys],
                        y=counts,
                        title="Eleman Adet Kar≈üƒ±la≈ütƒ±rmasƒ±",
                        color=counts,
                        color_continuous_scale="viridis"
                    )
                    fig_bar.update_layout(height=400)
                    st.plotly_chart(fig_bar, use_container_width=True)
                
                elif chart_type == "Alan Kar≈üƒ±la≈ütƒ±rmasƒ±":
                    areas = [stats[key]['toplam_alan'] for key in element_keys]
                    fig_area = px.bar(
                        x=[key.capitalize() for key in element_keys],
                        y=areas,
                        title="Toplam Alan Kar≈üƒ±la≈ütƒ±rmasƒ± (m¬≤)",
                        color=areas,
                        color_continuous_scale="plasma"
                    )
                    fig_area.update_layout(height=400)
                    st.plotly_chart(fig_area, use_container_width=True)
                
                else:  # Detay Analiz
                    # Subplots olu≈ütur
                    fig = make_subplots(
                        rows=2, cols=2,
                        subplot_titles=("Eleman Adetleri", "Toplam Alanlar", "Ortalama Alanlar", "Oransal Daƒüƒ±lƒ±m"),
                        specs=[[{"secondary_y": False}, {"secondary_y": False}],
                               [{"secondary_y": False}, {"type": "pie"}]]
                    )
                    
                    # Eleman adetleri
                    counts = [stats[key]['adet'] for key in element_keys]
                    fig.add_trace(
                        go.Bar(x=[key.capitalize() for key in element_keys], y=counts, name="Adet"),
                        row=1, col=1
                    )
                    
                    # Toplam alanlar
                    areas = [stats[key]['toplam_alan'] for key in element_keys]
                    fig.add_trace(
                        go.Bar(x=[key.capitalize() for key in element_keys], y=areas, name="Alan"),
                        row=1, col=2
                    )
                    
                    # Ortalama alanlar
                    avg_areas = [stats[key]['ortalama_alan'] for key in element_keys]
                    fig.add_trace(
                        go.Scatter(x=[key.capitalize() for key in element_keys], y=avg_areas, 
                                 mode='lines+markers', name="Ort. Alan"),
                        row=2, col=1
                    )
                    
                    # Pie chart
                    non_zero_areas = [(key.capitalize(), area) for key, area in 
                                    zip(element_keys, areas) if area > 0]
                    if non_zero_areas:
                        labels, values = zip(*non_zero_areas)
                        fig.add_trace(
                            go.Pie(labels=labels, values=values, name="Daƒüƒ±lƒ±m"),
                            row=2, col=2
                        )
                    
                    fig.update_layout(height=600, showlegend=False)
                    st.plotly_chart(fig, use_container_width=True)
                
                # Rapor indirme
                st.header("üìÑ Rapor")
                
                if st.button("üìä Analiz Raporunu ƒ∞ndir"):
                    # CSV raporu olu≈ütur
                    report_data = []
                    for element_type in element_keys:
                        stat = stats[element_type]
                        report_data.append({
                            'Eleman Tipi': element_type.capitalize(),
                            'Adet': stat['adet'],
                            'Toplam Alan (m¬≤)': round(stat['toplam_alan'], 2),
                            'Ortalama Alan (m¬≤)': round(stat['ortalama_alan'], 2),
                            'Toplam Uzunluk (m)': round(stat['toplam_uzunluk'], 2)
                        })
                    
                    report_df = pd.DataFrame(report_data)
                    
                    # CSV'yi string'e √ßevir
                    csv_buffer = io.StringIO()
                    report_df.to_csv(csv_buffer, index=False, encoding='utf-8')
                    csv_data = csv_buffer.getvalue()
                    
                    st.download_button(
                        label="üìÅ CSV Raporu ƒ∞ndir",
                        data=csv_data,
                        file_name=f"yapi_analiz_raporu_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
            
            else:
                st.error("Dosya analiz edilemedi. L√ºtfen ge√ßerli bir DWG/DXF dosyasƒ± y√ºkleyin.")
        
        # Ge√ßici dosyalarƒ± temizle
        try:
            if 'dxf_path' in locals() and dxf_path:
                os.unlink(dxf_path)
        except:
            pass
    
    else:
        # Ba≈ülangƒ±√ß sayfasƒ±
        st.markdown("""
        ## üèóÔ∏è Yapƒ± Elemanƒ± Analiz Uygulamasƒ±
        
        Bu uygulama DWG/DXF dosyalarƒ±nƒ±zdan yapƒ± elemanlarƒ±nƒ± otomatik olarak analiz eder.
        
        ### üîß √ñzellikler:
        - ‚úÖ DWG dosyalarƒ±nƒ± otomatik DXF'ye d√∂n√º≈üt√ºrme
        - ‚úÖ Katman bazlƒ± eleman sƒ±nƒ±flandƒ±rmasƒ±
        - ‚úÖ Kolon, kiri≈ü, perde, d√∂≈üeme ve temel analizi  
        - ‚úÖ Alan, uzunluk ve adet hesaplamalarƒ±
        - ‚úÖ Statik kontroller ve uyarƒ±lar
        - ‚úÖ ƒ∞nteraktif grafikler ve tablolar
        - ‚úÖ CSV rapor √ßƒ±ktƒ±sƒ±
        
        ### üìã Desteklenen Eleman Tipleri:
        - **Kolon**: Dikd√∂rtgen ve dairesel kesitler
        - **Kiri≈ü**: √áizgisel elemanlar
        - **Perde**: D√ºzlem elemanlar  
        - **D√∂≈üeme**: Geni≈ü d√ºzlem elemanlar
        - **Temel**: Noktasal ve ≈üerit temeller
        
        ### ‚öôÔ∏è Kullanƒ±m:
        1. Sol men√ºden DWG/DXF dosyanƒ±zƒ± y√ºkleyin
        2. Analiz sonu√ßlarƒ±nƒ± inceleyin
        3. Statik kontrol uyarƒ±larƒ±nƒ± deƒüerlendirin
        4. ƒ∞htiya√ß duyduƒüunuzda raporu indirin
        
        ---
        **Not**: DWG d√∂n√º≈üt√ºrme i√ßin ODA File Converter kurulu olmalƒ±dƒ±r.
        """)

if __name__ == "__main__":
    main()
  
