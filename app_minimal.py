#!/usr/bin/env python3
"""
Minimal Yapƒ±sal Analiz Uygulamasƒ±
Sistem paketleri ile √ßalƒ±≈üacak basit versiyon
"""

import sys
import os
import tempfile
import math
import json
from typing import Dict, List, Tuple, Optional

# Streamlit import kontrol√º
try:
    import streamlit as st
except ImportError:
    print("‚ùå Streamlit kurulu deƒüil!")
    print("Kurulum i√ßin: pip3 install --user streamlit")
    sys.exit(1)

# Diƒüer paketler i√ßin kontrol
missing_packages = []

try:
    import pandas as pd
except ImportError:
    missing_packages.append("pandas")

try:
    import numpy as np
except ImportError:
    missing_packages.append("numpy")

try:
    import ezdxf
except ImportError:
    missing_packages.append("ezdxf")

# Eksik paketler varsa uyarƒ± ver ama devam et
if missing_packages:
    st.warning(f"‚ö†Ô∏è Eksik paketler: {', '.join(missing_packages)}")
    st.info("Kurulum i√ßin: pip3 install --user " + " ".join(missing_packages))

# Sayfa konfig√ºrasyonu
st.set_page_config(
    page_title="Basit DWG/DXF Analizi",
    page_icon="üèóÔ∏è",
    layout="wide"
)

class SimpleStructuralAnalyzer:
    def __init__(self):
        self.elements = {
            'kolon': [],
            'kiri≈ü': [],
            'perde': [],
            'd√∂≈üeme': [],
            'temel': []
        }
        
        self.layer_keywords = {
            'kolon': ['kolon', 'column', 'col', 'c-'],
            'kiri≈ü': ['kiri≈ü', 'beam', 'b-'],
            'perde': ['perde', 'wall', 'w-'],
            'd√∂≈üeme': ['d√∂≈üeme', 'slab', 'f-'],
            'temel': ['temel', 'foundation', 'fd-']
        }
    
    def create_demo_dxf(self):
        """Demo DXF olu≈ütur - ezdxf olmadan basit versiyon"""
        demo_elements = {
            'kolon': [
                {'alan': 0.25, 'geni≈ülik': 0.5, 'uzunluk': 0.5, 'koordinat': (0, 0)},
                {'alan': 0.36, 'geni≈ülik': 0.6, 'uzunluk': 0.6, 'koordinat': (5, 0)},
                {'alan': 0.25, 'geni≈ülik': 0.5, 'uzunluk': 0.5, 'koordinat': (10, 0)},
                {'alan': 0.36, 'geni≈ülik': 0.6, 'uzunluk': 0.6, 'koordinat': (0, 5)},
                {'alan': 0.25, 'geni≈ülik': 0.5, 'uzunluk': 0.5, 'koordinat': (5, 5)},
                {'alan': 0.36, 'geni≈ülik': 0.6, 'uzunluk': 0.6, 'koordinat': (10, 5)},
            ],
            'kiri≈ü': [
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (2.5, 0)},
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (7.5, 0)},
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (2.5, 5)},
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (7.5, 5)},
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (0, 2.5)},
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (5, 2.5)},
                {'uzunluk': 5.0, 'alan': 0, 'koordinat': (10, 2.5)},
            ],
            'perde': [
                {'alan': 15.0, 'geni≈ülik': 0.3, 'uzunluk': 10, 'koordinat': (-0.15, 2.5)},
                {'alan': 7.5, 'geni≈ülik': 0.3, 'uzunluk': 5, 'koordinat': (5, -0.15)},
            ],
            'd√∂≈üeme': [
                {'alan': 125.0, 'geni≈ülik': 10, 'uzunluk': 12.5, 'koordinat': (5, 2.5)},
            ],
            'temel': [
                {'alan': 1.44, 'geni≈ülik': 1.2, 'uzunluk': 1.2, 'koordinat': (0, 0)},
                {'alan': 1.44, 'geni≈ülik': 1.2, 'uzunluk': 1.2, 'koordinat': (5, 0)},
                {'alan': 1.44, 'geni≈ülik': 1.2, 'uzunluk': 1.2, 'koordinat': (10, 0)},
                {'alan': 1.44, 'geni≈ülik': 1.2, 'uzunluk': 1.2, 'koordinat': (0, 5)},
                {'alan': 1.44, 'geni≈ülik': 1.2, 'uzunluk': 1.2, 'koordinat': (5, 5)},
                {'alan': 1.44, 'geni≈ülik': 1.2, 'uzunluk': 1.2, 'koordinat': (10, 5)},
            ]
        }
        
        self.elements = demo_elements
        return True
    
    def analyze_file(self, uploaded_file):
        """Dosya analizi - ≈üimdilik demo veri kullan"""
        if uploaded_file:
            st.info("üìù Demo verileri kullanƒ±lƒ±yor (DXF parser kurulu deƒüil)")
        
        return self.create_demo_dxf()
    
    def get_statistics(self):
        """Basit istatistikler"""
        stats = {}
        
        for element_type, elements in self.elements.items():
            if elements:
                areas = [e.get('alan', 0) for e in elements]
                lengths = [e.get('uzunluk', 0) for e in elements]
                
                stats[element_type] = {
                    'adet': len(elements),
                    'toplam_alan': sum(areas),
                    'ortalama_alan': sum(areas) / len(areas) if areas else 0,
                    'toplam_uzunluk': sum(lengths),
                    'min_alan': min(areas) if areas else 0,
                    'max_alan': max(areas) if areas else 0
                }
            else:
                stats[element_type] = {
                    'adet': 0,
                    'toplam_alan': 0,
                    'ortalama_alan': 0,
                    'toplam_uzunluk': 0,
                    'min_alan': 0,
                    'max_alan': 0
                }
        
        return stats
    
    def perform_checks(self):
        """Basit statik kontroller"""
        warnings = []
        stats = self.get_statistics()
        
        # Kolon boyut kontrol√º
        column_elements = self.elements.get('kolon', [])
        small_columns = 0
        for col in column_elements:
            width = col.get('geni≈ülik', 0)
            height = col.get('uzunluk', 0)
            if min(width, height) < 0.25:  # 25cm
                small_columns += 1
        
        if small_columns > 0:
            warnings.append(f"üö® {small_columns} adet kolon minimum boyutun altƒ±nda (25cm)")
        
        # Kiri≈ü a√ßƒ±klƒ±k kontrol√º
        beam_elements = self.elements.get('kiri≈ü', [])
        long_beams = [b for b in beam_elements if b.get('uzunluk', 0) > 8]
        if long_beams:
            warnings.append(f"‚ö†Ô∏è {len(long_beams)} adet kiri≈ü 8m'den uzun")
        
        # Perde oranƒ± kontrol√º
        total_floor_area = stats.get('d√∂≈üeme', {}).get('toplam_alan', 0)
        total_wall_area = stats.get('perde', {}).get('toplam_alan', 0)
        
        if total_floor_area > 0:
            wall_ratio = (total_wall_area / total_floor_area) * 100
            if wall_ratio < 1.0:
                warnings.append(f"‚ö†Ô∏è Perde alanƒ± oranƒ± d√º≈ü√ºk: %{wall_ratio:.1f}")
        
        # Temel kontrol√º
        column_count = stats.get('kolon', {}).get('adet', 0)
        foundation_count = stats.get('temel', {}).get('adet', 0)
        if foundation_count < column_count:
            warnings.append(f"üö® Temel eksikliƒüi: {foundation_count} temel / {column_count} kolon")
        
        return warnings

def main():
    st.title("üèóÔ∏è Basit DWG/DXF Yapƒ± Elemanƒ± Analizi")
    st.markdown("---")
    
    # Paket durumu kontrol√º
    col1, col2, col3 = st.columns(3)
    
    with col1:
        try:
            import pandas
            st.success("‚úÖ Pandas")
        except ImportError:
            st.error("‚ùå Pandas")
    
    with col2:
        try:
            import numpy
            st.success("‚úÖ NumPy")
        except ImportError:
            st.error("‚ùå NumPy")
    
    with col3:
        try:
            import ezdxf
            st.success("‚úÖ ezdxf")
        except ImportError:
            st.error("‚ùå ezdxf")
    
    # Sidebar
    st.sidebar.header("üìÅ Dosya Y√ºkleme")
    uploaded_file = st.sidebar.file_uploader(
        "DWG veya DXF dosyasƒ± se√ßin",
        type=['dwg', 'dxf'],
        help="Demo modu - ger√ßek dosya analizi i√ßin ezdxf gerekli"
    )
    
    # Analyzer olu≈ütur
    analyzer = SimpleStructuralAnalyzer()
    
    # Analiz yap
    if st.sidebar.button("üìä Analizi Ba≈ülat") or uploaded_file:
        with st.spinner('Analiz yapƒ±lƒ±yor...'):
            success = analyzer.analyze_file(uploaded_file)
        
        if success:
            # Ana i√ßerik
            tab1, tab2, tab3 = st.tabs(["üìä Genel Bakƒ±≈ü", "üìà Detaylar", "‚ö†Ô∏è Kontroller"])
            
            with tab1:
                st.header("üìä Genel Bakƒ±≈ü")
                
                stats = analyzer.get_statistics()
                
                # Metr–∏–∫ler
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    total_elements = sum(stats[key]['adet'] for key in stats)
                    st.metric("üèóÔ∏è Toplam Eleman", total_elements)
                
                with col2:
                    total_area = sum(stats[key]['toplam_alan'] for key in stats)
                    st.metric("üìê Toplam Alan", f"{total_area:.1f} m¬≤")
                
                with col3:
                    column_count = stats['kolon']['adet']
                    st.metric("üèõÔ∏è Kolon Sayƒ±sƒ±", column_count)
                
                with col4:
                    beam_length = stats['kiri≈ü']['toplam_uzunluk']
                    st.metric("üìè Kiri≈ü Uzunluƒüu", f"{beam_length:.1f} m")
                
                # √ñzet tablo
                st.subheader("üìã Eleman √ñzeti")
                
                summary_data = []
                for element_type, stat in stats.items():
                    summary_data.append([
                        element_type.capitalize(),
                        stat['adet'],
                        f"{stat['toplam_alan']:.2f}",
                        f"{stat['ortalama_alan']:.2f}",
                        f"{stat['toplam_uzunluk']:.2f}"
                    ])
                
                # Pandas varsa DataFrame kullan, yoksa basit tablo
                try:
                    import pandas as pd
                    df = pd.DataFrame(summary_data, columns=[
                        'Eleman Tipi', 'Adet', 'Toplam Alan (m¬≤)', 
                        'Ortalama Alan (m¬≤)', 'Toplam Uzunluk (m)'
                    ])
                    st.dataframe(df, use_container_width=True)
                except ImportError:
                    # Basit tablo
                    st.markdown("| Eleman Tipi | Adet | Toplam Alan (m¬≤) | Ortalama Alan (m¬≤) | Toplam Uzunluk (m) |")
                    st.markdown("|-------------|------|------------------|--------------------|--------------------|")
                    for row in summary_data:
                        st.markdown(f"| {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]} |")
            
            with tab2:
                st.header("üìà Detaylƒ± Analiz")
                
                for element_type, elements in analyzer.elements.items():
                    if elements:
                        st.subheader(f"üîç {element_type.capitalize()} Detaylarƒ±")
                        
                        col1, col2, col3 = st.columns(3)
                        stat = stats[element_type]
                        
                        with col1:
                            st.metric("Adet", stat['adet'])
                        with col2:
                            st.metric("Min Alan", f"{stat['min_alan']:.2f} m¬≤")
                        with col3:
                            st.metric("Max Alan", f"{stat['max_alan']:.2f} m¬≤")
                        
                        # ƒ∞lk 5 elemanƒ± g√∂ster
                        st.write("**ƒ∞lk 5 Eleman:**")
                        for i, element in enumerate(elements[:5]):
                            coord = element.get('koordinat', (0, 0))
                            alan = element.get('alan', 0)
                            st.write(f"{i+1}. Alan: {alan:.2f} m¬≤, Konum: ({coord[0]:.1f}, {coord[1]:.1f})")
                        
                        st.markdown("---")
            
            with tab3:
                st.header("‚ö†Ô∏è Statik Kontroller")
                
                warnings = analyzer.perform_checks()
                
                if warnings:
                    st.subheader("üö® Tespit Edilen Sorunlar")
                    for warning in warnings:
                        if 'üö®' in warning:
                            st.error(warning)
                        else:
                            st.warning(warning)
                else:
                    st.success("‚úÖ Statik kontrollerde sorun tespit edilmedi!")
                
                # Kontrol kriterleri
                st.subheader("üìã Kontrol Kriterleri")
                
                criteria = [
                    ["Minimum Kolon Boyutu", "25 cm", "‚úÖ" if not any('kolon minimum' in w for w in warnings) else "‚ùå"],
                    ["Maksimum Kiri≈ü A√ßƒ±klƒ±ƒüƒ±", "8 m", "‚úÖ" if not any('8m' in w for w in warnings) else "‚ùå"],
                    ["Minimum Perde Oranƒ±", "%1", "‚úÖ" if not any('Perde alanƒ±' in w for w in warnings) else "‚ùå"],
                    ["Temel-Kolon Uyumu", "1:1", "‚úÖ" if not any('Temel eksikliƒüi' in w for w in warnings) else "‚ùå"]
                ]
                
                st.markdown("| Kriter | Deƒüer | Durum |")
                st.markdown("|--------|-------|-------|")
                for row in criteria:
                    st.markdown(f"| {row[0]} | {row[1]} | {row[2]} |")
            
            # CSV Export
            st.sidebar.markdown("---")
            st.sidebar.subheader("üìÑ Rapor")
            
            if st.sidebar.button("üìä CSV Raporu ƒ∞ndir"):
                # JSON formatƒ±nda basit rapor
                report_data = {
                    'istatistikler': stats,
                    'uyarilar': warnings,
                    'tarih': str(pd.Timestamp.now()) if 'pd' in globals() else "N/A"
                }
                
                json_str = json.dumps(report_data, indent=2, ensure_ascii=False)
                
                st.sidebar.download_button(
                    label="üìÅ JSON Raporu ƒ∞ndir",
                    data=json_str,
                    file_name="yapi_analiz_raporu.json",
                    mime="application/json"
                )
        
        else:
            st.error("‚ùå Dosya analiz edilemedi!")
    
    else:
        # Ba≈ülangƒ±√ß sayfasƒ±
        st.markdown("""
        ## üèóÔ∏è Basit Yapƒ± Elemanƒ± Analiz Uygulamasƒ±
        
        Bu, sistem paketleri ile √ßalƒ±≈üacak ≈üekilde basitle≈ütirilmi≈ü versiyondur.
        
        ### üìã Mevcut Durum:
        - ‚úÖ **Streamlit**: √áalƒ±≈üƒ±yor
        - ‚ö†Ô∏è **Demo Modu**: Ger√ßek DXF analizi i√ßin ek paketler gerekli
        
        ### üîß Tam √ñzellikler ƒ∞√ßin Kurulum:
        ```bash
        pip3 install --user pandas numpy ezdxf plotly matplotlib reportlab
        ```
        
        ### üéØ Bu Versiyonda:
        - ‚úÖ Demo yapƒ± elemanƒ± verileri
        - ‚úÖ Temel istatistik hesaplamalarƒ±
        - ‚úÖ Statik kontroller
        - ‚úÖ Basit raporlama
        
        Sol men√ºden "Analizi Ba≈ülat" butonuna tƒ±klayarak demo analizi g√∂rebilirsiniz.
        """)

if __name__ == "__main__":
    main()